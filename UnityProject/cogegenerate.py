##############################################################################
# RPCMethod.cs
##############################################################################
def rpcmethod_write_header(f):
    f.write('''
//
// this code is generated by cogegenerate.py
//
using Osaru.Serialization;
using Osaru.Serialization.Deserializers;
using Osaru.Serialization.Serializers;
using System;


namespace Osaru.RPC
{
''')


def rpcmethod_write_actions(f, num):
    # action
    for i in range(num):
        if i==0:
            generic_params=""
        else:
            generic_params="<"+", ".join((f"A{x}" for x in range(i)))+">"

        deserializers="".join((
            f"        IDeserializerBase<A{x}> m_d{x};\n" for x in range(i)))
        delegate="public delegate void Method("+", ".join((
            f"A{x} a{x}" for x in range(i)))+");"
        get_deserializers="".join((
            f"            m_d{x} = r.GetDeserializer<A{x}>();\n" for x in range(i)))
        arg_vars="".join((
            f"                var a{x} = default(A{x});\n" for x in range(i)))
        deserializes="".join((
            f"                m_d{x}.Deserialize(f.Request.Params[{x}], ref a{x});\n" 
            for x in range(i)))
        invoke="m_method("+", ".join((f"a{x}" for x in range(i)))+");"

        f.write(f"""
    // Action{generic_params}
    public class RPCAction{generic_params} : IRPCMethod
    {{
{deserializers}
        {delegate}
        Method m_method;
        public RPCAction(TypeRegistory r, Method method)
        {{
            m_method = method;
{get_deserializers}
        }}

        public void Call<T>(IRPCContext<T> f)
            where T : IParser<T>
        {{
            try
            {{
{arg_vars}
{deserializes}

                {invoke}
                f.Success();
            }}
            catch (Exception ex)
            {{
                f.Error(ex);
            }}
        }}
    }}

""")


def rpcmethod_write_funcs(f, num):
    # func
    for i in range(num):
        generic_params="<"+"".join((f"A{x}, " for x in range(i)))+"R>"

        deserializers="".join((
            f"        IDeserializerBase<A{x}> m_d{x};\n" for x in range(i)))
        delegate="public delegate R Method("+", ".join((
            f"A{x} a{x}" for x in range(i)))+");"
        get_deserializers="".join((
            f"            m_d{x} = r.GetDeserializer<A{x}>();\n" for x in range(i)))
        arg_vars="".join((
            f"                var a{x} = default(A{x});\n" for x in range(i)))
        deserializes="".join((
            f"                m_d{x}.Deserialize(f.Request.Params[{x}], ref a{x});\n" 
            for x in range(i)))
        invoke="m_method("+", ".join((f"a{x}" for x in range(i)))+")"


        f.write(f"""
    // Func{generic_params}
    public class RPCFunc{generic_params} : IRPCMethod
    {{
{deserializers}
        {delegate}
        Method m_method;
        SerializerBase<R> m_s;
        public RPCFunc(TypeRegistory r, Method method)
        {{
            m_method = method;
{get_deserializers}
            m_s = r.GetSerializer<R>();
        }}

        public void Call<T>(IRPCContext<T> f)
            where T : IParser<T>
        {{
            try
            {{
{arg_vars}
{deserializes}

                f.Success({invoke}, m_s);
            }}
            catch (Exception ex)
            {{
                f.Error(ex);
            }}
        }}
    }}
""")


##############################################################################
# TypeRegistoryExtensions.cs
##############################################################################
def typeregistory_extensions_write_header(f):
    f.write("""
//
// this code is generated by cogegenerate.py
//
using System;
using Osaru.Serialization;


namespace Osaru.RPC
{
    public static class TypeRegistoryExtensions
    {

""")


def typeregistory_extensions_write_actions(f, num):
    f.write("        #region Action")
    for i in range(num):

        if i==0:
            generic_params=""
        else:
            generic_params="<"+", ".join((f"A{x}" for x in range(i))) + ">"

        f.write(f"""
        public static RPCAction{generic_params} RPCAction{generic_params}(
            this TypeRegistory r, Action{generic_params} p)
        {{
            return new RPCAction{generic_params}(r
                , new RPCAction{generic_params}.Method(p));
        }}
""")
    f.write("        #endregion\n\n")


def typeregistory_extensions_write_funcs(f, num):
    f.write("        #region Func")
    for i in range(num):
        generic_params="<"+"".join((f"A{x}, " for x in range(i))) + "R>"

        f.write(f"""
        public static RPCFunc{generic_params} RPCFunc{generic_params}(
            this TypeRegistory r, Func{generic_params} p)
        {{
            return new RPCFunc{generic_params}(r
                , new RPCFunc{generic_params}.Method(p));
        }}
""")
    f.write("        #endregion\n")


##############################################################################
# main
##############################################################################
if __name__ == "__main__":
    path="Assets/Osaru/Scripts/RPC/RPCMethod.cs"
    with open(path, 'w') as f:
        rpcmethod_write_header(f)
        rpcmethod_write_actions(f, 5)
        rpcmethod_write_funcs(f, 5)
        f.write('}')

    path="Assets/Osaru/Scripts/RPC/Extensions/TYpeRegistoryExtensions.cs"
    with open(path, 'w') as f:
        typeregistory_extensions_write_header(f)
        typeregistory_extensions_write_actions(f, 5)
        typeregistory_extensions_write_funcs(f, 5)
        f.write('    }\n')
        f.write('}\n')

